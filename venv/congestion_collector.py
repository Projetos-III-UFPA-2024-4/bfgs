import traci  # Importa a biblioteca TraCI para interagir com o SUMO
import json  # Importa JSON para carregar configura√ß√µes
import traffic_utils  # Importa fun√ß√µes auxiliares do m√≥dulo traffic_utils

import mysql.connector  # Importa a biblioteca para conectar ao banco de dados MySQL

def run():
    # Carrega as configura√ß√µes do SUMO a partir de um arquivo JSON
    with open("config_sumo.json", "r") as sumo_file:
        config = json.load(sumo_file)

    # Carrega as configura√ß√µes do banco de dados a partir de um arquivo JSON
    with open("config_db.json", "r") as db_file:
        db_config = json.load(db_file)

    # Configura√ß√£o dos par√¢metros do SUMO
    Sumo_config = [
        config["sumo_binary"],  # Caminho para o bin√°rio do SUMO
        '-c', config["config_file"],  # Arquivo de configura√ß√£o do SUMO
        '--step-length', config["step_length"],  # Define o tempo de cada passo da simula√ß√£o
        '--delay', config["delay"],  # Define o atraso na execu√ß√£o
        '--lateral-resolution', config["delay"]  # Define a resolu√ß√£o lateral
    ]

    # Conecta ao banco de dados MySQL usando as credenciais carregadas
    cnx = mysql.connector.connect(
        host=db_config["host"],
        user=db_config["user"],
        password=db_config["password"],
        database=db_config["database"]
    )

    cur = cnx.cursor()  # Cria um cursor para executar comandos SQL

    # Query para inserir dados na tabela de estado de congestionamento
    query = """
        INSERT INTO my_db.congestion_state 
        (cycle_number, num_phases, phase_index, edge_id, observed_flow, critical_flow, critical_flow_total) 
        VALUES (%s, %s, %s, %s, %s, %s, %s)
    """

    # In√≠cio da execu√ß√£o principal do c√≥digo
    
    traci.start(Sumo_config)  # Inicia a simula√ß√£o do SUMO com os par√¢metros configurados

    # Nome do sem√°foro a ser monitorado
    myTl = "Tl1"

    # Verifica se o sem√°foro est√° na lista de IDs do SUMO
    if myTl not in traci.trafficlight.getIDList():
        print(f"Erro: Sem√°foro '{myTl}' n√£o encontrado.")  # Mensagem de erro se n√£o encontrado
        traci.close()  # Fecha a conex√£o com o SUMO
        cnx.close()  # Fecha a conex√£o com o banco de dados
        exit()  # Encerra o programa

    # Vari√°veis para controle do ciclo dos sem√°foros
    cycle_number = 0  # N√∫mero do ciclo atual
    current_phase_index = 0  # √çndice da fase do sem√°foro
    phase_start_time = traci.simulation.getTime()  # Obt√©m o tempo inicial da fase atual

    # Obt√©m a lista de detectores de indu√ß√£o presentes no cen√°rio do SUMO
    detectors = traci.inductionloop.getIDList()

    # Se nenhum detector for encontrado, exibe um aviso
    if not detectors:
        print("Nenhum detector encontrado! Verifique sua configura√ß√£o no SUMO.")

    # Obt√©m as fases do sem√°foro e filtra apenas as fases verdes
    phases = traci.trafficlight.getAllProgramLogics(myTl)[0].phases
    green_phases = [i for i, phase in enumerate(phases) if "G" in phase.state]
    numPhases = traffic_utils.get_green_phases(myTl)  # Obt√©m o n√∫mero de fases verdes do sem√°foro
    print(f"{numPhases}\n")  # Exibe o n√∫mero de fases verdes

    # Lista de edges associadas aos detectores
    edges = []
    for detector in detectors:
        lane_id = traci.inductionloop.getLaneID(detector)  # Obt√©m a lane associada ao detector
        edges.append(lane_id.split("_")[0])  # Extrai a edge da lane e adiciona √† lista

    # Inicializa um dicion√°rio para armazenar a contagem de ve√≠culos por edge
    detector_counts = {edg: 0 for edg in edges}

    # Loop principal da simula√ß√£o: continua enquanto houver ve√≠culos previstos na simula√ß√£o
    while traci.simulation.getMinExpectedNumber() > 0:
        traci.simulationStep()  # Avan√ßa um passo na simula√ß√£o
        step = traci.simulation.getTime()  # Obt√©m o tempo atual da simula√ß√£o

        # Atualiza a contagem de ve√≠culos detectados
        update = traffic_utils.update_detector_counts(detectors)

        # Obt√©m a fase atual do sem√°foro
        current_phase = traci.trafficlight.getPhase(myTl)

        # Se a fase atual for uma fase verde
        if current_phase in green_phases:
            phase_duration = phases[current_phase].duration  # Obt√©m a dura√ß√£o da fase atual

            # Atualiza os detectores com base na fase atual
            update = traffic_utils.update_detector_counts(detectors, detector_counts)

            # Se a dura√ß√£o da fase verde terminou
            if step >= phase_start_time + phase_duration:
                print(f"\nüö¶ Fim do Verde da Fase {current_phase} no Ciclo {cycle_number}")                    

                # Calcula os fluxos cr√≠ticos baseados na contagem de ve√≠culos
                critical_flows = traffic_utils.calculate_critical_flow(detector_counts)
                critical_flow_total = sum(critical_flows.values())  # Soma dos fluxos cr√≠ticos

                # Para cada edge, obt√©m os fluxos cr√≠ticos e observados
                for edge, flow in critical_flows.items():
                    observed_flow = detector_counts.get(edge, 0)  # Obt√©m o fluxo observado

                    # Exibe os dados coletados
                    print(f"  - {edge}: Fluxo cr√≠tico = {flow:.4f} | Carros observados = {observed_flow}")

                    # Insere os dados no banco de dados
                    cur.execute(query, (cycle_number, numPhases, current_phase, edge, observed_flow, flow, critical_flow_total))

                cnx.commit()  # Confirma a transa√ß√£o no banco de dados

                # Resetar a contagem dos detectores para a pr√≥xima fase
                detector_counts = {edg: 0 for edg in edges}

                # Avan√ßar para a pr√≥xima fase de verde
                current_phase_index = (current_phase_index + 1) % numPhases
                phase_start_time = step  # Atualiza o tempo de in√≠cio da nova fase verde

                # Se todas as fases passaram, avan√ßa um ciclo
                if current_phase_index == 0:
                    cycle_number += 1
            
    traci.close()  # Finaliza a conex√£o com o SUMO
    cnx.close()  # Finaliza a conex√£o com o banco de dados

if __name__ == "__main__":
    run()